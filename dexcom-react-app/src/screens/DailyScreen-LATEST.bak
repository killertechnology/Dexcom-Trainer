import React, { useState, useEffect } from "react";
import { Card, CardContent } from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Bar, Line } from "react-chartjs-2";
import Scoreboard from "./Scoreboard"; // Adjust the path if needed
import Chart from "chart.js/auto";

import {
  Chart as ChartJS,
  CategoryScale,
  BarController,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";
import annotationPlugin from "chartjs-plugin-annotation";

ChartJS.register(
  BarController,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Filler,
  annotationPlugin
);

const DailyScreen = () => {
  // Existing state variables
  const [majorEventsList, setMajorEvents] = useState([]);
  const [selectedDate, setSelectedDate] = useState("2024-12-22");
  const [cgmData, setCgmData] = useState(new Array(96).fill(null));
  const [bolusData, setBolusData] = useState(new Array(96).fill(null));
  const [bolusDetails, setBolusDetails] = useState([]);
  const [scoreData, setScoreData] = useState({
    totalPoints: 55,
    pointsEarnedToday: 0,
    pointsDeductedToday: 0,
    negativeEvents: [],
    positiveEvents: 0,
  });
  const [spikeAnnotations, setSpikeAnnotations] = useState([]);
  const [dailyScore, setDailyScore] = useState(null);
  const [earlyBolusIndexes, setEarlyBolusIndexes] = useState({});
  const [supplementalBolusIndexes, setSupplementalBolusIndexes] = useState({});
  const [correctionBolusIndexes, setCorrectionBolusIndexes] = useState({});
  const [expectedBolusIndexes, setExpectedBolusIndexes] = useState({});
  const [expectedBolusBars, setExpectedBolusBars] = useState([]);
  const [expandedIndex, setExpandedIndex] = useState(null);

  // New state for modal popup
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState("");

  // Existing useEffects
  useEffect(() => {
    fetchData(selectedDate);
  }, [selectedDate]);

  useEffect(() => {
    fetchDailyScores(selectedDate).then((data) => {
      if (data) {
        setDailyScore(data);
      }
    });
  }, [selectedDate]);

  useEffect(() => {
    // Run once on mount if needed
    setEarlyBolusIndexes((prev) => ({ ...prev }));
    setCorrectionBolusIndexes((prev) => ({ ...prev }));
    setSupplementalBolusIndexes((prev) => ({ ...prev }));
    setExpectedBolusBars([...expectedBolusBars]);
  }, []);

  // ─── NEW: Function to call Daily AI API ──────────────────────────────
  const handleDailyAIClick = async () => {
    // Build a pipe-delimited string from majorEventsList.
    // Each event is assumed to be an array; we join its elements with "|"
    // and then join all events with " | " as a separator.
    const pipeDelimited = majorEventsList
      .map((event) => event.join("|"))
      .join(" | ");
    try {
      const response = await fetch("https://api.example.com/daily-ai", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ events: pipeDelimited }),
      });
      if (!response.ok) {
        throw new Error("Failed to fetch AI summary");
      }
      const data = await response.json();
      // Assume the response contains a property named "summary"
      setModalContent(data.summary || "No summary available.");
      setShowModal(true);
    } catch (error) {
      console.error(error);
      setModalContent("Error fetching summary.");
      setShowModal(true);
    }
  };
  // ─────────────────────────────────────────────────────────────────────

  let dataRequested = false;

  const fetchData = (date) => {
    console.log("fetching data");
    if (!dataRequested) {
      dataRequested = true;
      Promise.all([
        fetch(
          `https://3tansqzb2f.execute-api.us-east-1.amazonaws.com/default/api/cgm?date=${date}`
        ).then((res) => res.json()),
        fetch(
          `https://3tansqzb2f.execute-api.us-east-1.amazonaws.com/default/api/bolus?date=${date}`
        ).then((res) => res.json()),
      ])
        .then(([cgmResponse, bolusResponse]) => {
          // Process CGM Data
          const formattedCgmData = new Array(96).fill(null);
          cgmResponse.forEach((entry) => {
            const timestamp = new Date(Date.parse(entry["Timestamp"]));
            const index =
              timestamp.getHours() * 4 + Math.floor(timestamp.getMinutes() / 15);
            if (index >= 0 && index < 96) {
              formattedCgmData[index] = entry["CGM Value"];
            }
          });

          // Process Bolus Data
          const formattedBolusData = new Array(96).fill(null);
          bolusResponse.forEach((entry) => {
            const timestamp = new Date(Date.parse(entry["Timestamp"]));
            const index =
              timestamp.getHours() * 4 + Math.floor(timestamp.getMinutes() / 15);
            if (index >= 0 && index < 96) {
              formattedBolusData[index] = entry["Insulin Delivered"];
            }
          });

          bolusResponse.forEach((entry) => {
            const timestamp = new Date(Date.parse(entry["Timestamp"]));
            const index =
              timestamp.getHours() * 4 + Math.floor(timestamp.getMinutes() / 15);
            if (index >= 0 && index < 96) {
              bolusDetails[index] = entry;
            }
          });

          setCgmData([...formattedCgmData]);
          setBolusData([...formattedBolusData]);
          detectBgSpikes(formattedCgmData);
          detectEarlyBolus(formattedCgmData, formattedBolusData, spikeTimes);
          detectCorrectionBolus(formattedCgmData, formattedBolusData, spikeTimes);
          detectExpectedBolus(formattedCgmData, formattedBolusData);
          detectSupplementalBolus(formattedBolusData);
          setMajorEvents(majorEventsList);

          majorEventsList.sort((a, b) => {
            return parseTime(a[1]) - parseTime(b[1]);
          });

          console.log(majorEventsList);
        })
        .catch((error) => console.error("Error fetching data:", error));
    }
  };

  const fetchDailyScores = async (date) => {
    try {
      const response = await fetch(
        `https://3tansqzb2f.execute-api.us-east-1.amazonaws.com/default/api/scores/1?date=${date}`
      );
      if (!response.ok) {
        throw new Error("Failed to fetch daily scores.");
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching daily scores:", error);
      return null;
    }
  };

  // ... (rest of your helper functions, spike detection, bolus detection, etc.)
  // For brevity, the unchanged parts of your code (such as detectBgSpikes,
  // detectEarlyBolus, detectCorrectionBolus, detectExpectedBolus, detectSupplementalBolus,
  // formatTime, getBgPointColor, chartData, chartOptions, etc.) remain as-is.

  const updateDate = (days) => {
    const newDate = new Date(selectedDate);
    newDate.setDate(newDate.getDate() + days);
    setSelectedDate(newDate.toISOString().split("T")[0]);
    // Clear existing events before fetching new data
    setMajorEvents([]);
    // Reset the accordion
    setExpandedIndex(null);
  };

  // ... (rest of your code for chart rendering, tooltip callbacks, etc.)

  return (
    <div className="dailyChartHead" align="center">
      <Card>
        <CardContent>
          {/* NEW: Daily AI Button */}
          <div style={{ marginBottom: "10px", textAlign: "center" }}>
            <Button onClick={handleDailyAIClick}>Daily AI</Button>
          </div>
          <Scoreboard dailyScore={dailyScore} />
          <table border={0} cellPadding={1}>
            <tbody>
              <tr>
                <td className="btnDateSelect">
                  <Button className="btnDateSelect" onClick={() => updateDate(-1)}>
                    ← Back
                  </Button>
                </td>
                <td className="btnDateSelect">&nbsp;</td>
                <td>
                  <input
                    type="date"
                    value={selectedDate}
                    onChange={(e) => setSelectedDate(e.target.value)}
                    className="dateSelect"
                  />
                </td>
                <td className="btnDateSelect">&nbsp;</td>
                <td>
                  <Button className="btnDateSelect" onClick={() => updateDate(1)}>
                    Next →
                  </Button>
                </td>
              </tr>
            </tbody>
          </table>
          <h3 className="text-xl font-semibold">Daily Blood Glucose Data</h3>
          <div style={{ height: "400px", width: "99%" }}>
            <Line data={chartData} options={chartOptions} />
          </div>

          {majorEventsList.length > 0 ? (
            <table
              border={0}
              height={1}
              cellPadding={0}
              cellSpacing={0}
              className="events_table"
            >
              <tbody>
                {majorEventsList
                  .slice()
                  .sort((a, b) => a.time - b.time) // Ensure chronological order
                  .map((msg, index) => (
                    <React.Fragment key={index}>
                      <tr>
                        <td
                          style={{
                            verticalAlign: "top",
                            padding: 5,
                          }}
                        >
                          <a
                            className="events_table"
                            onClick={() => setExpandedIndex(expandedIndex === index ? null : index)}
                            style={{ cursor: "pointer" }}
                          >
                            <div>
                              {msg[1]} - {msg[5]}
                            </div>
                            {expandedIndex === index && (
                              <div
                                className="events_detail accordion-content"
                                dangerouslySetInnerHTML={{
                                  __html: msg[2].replace(/\n/g, "<br />"),
                                }}
                              ></div>
                            )}
                          </a>
                        </td>
                      </tr>
                    </React.Fragment>
                  ))}
              </tbody>
            </table>
          ) : (
            <p>No significant events detected today.</p>
          )}
        </CardContent>
      </Card>

      {/* NEW: Modal Popup */}
      {showModal && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            zIndex: 9999,
          }}
        >
          <div
            style={{
              backgroundColor: "#fff",
              padding: "20px",
              borderRadius: "4px",
              position: "relative",
              margin: "0 20px",
              maxWidth: "90%",
              maxHeight: "90%",
              overflowY: "auto",
            }}
          >
            <button
              onClick={() => setShowModal(false)}
              style={{
                position: "absolute",
                top: "10px",
                right: "10px",
                background: "none",
                border: "none",
                fontSize: "16px",
                cursor: "pointer",
              }}
            >
              X
            </button>
            <div>{modalContent}</div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DailyScreen;
